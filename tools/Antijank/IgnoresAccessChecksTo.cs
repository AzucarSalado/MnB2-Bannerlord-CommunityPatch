using System.Reflection;
using System.Runtime.CompilerServices;
using static System.Reflection.BindingFlags;

[assembly: IgnoresAccessChecksTo("TaleWorlds.BattlEye.Client")]
[assembly: IgnoresAccessChecksTo("TaleWorlds.CampaignSystem")]
[assembly: IgnoresAccessChecksTo("TaleWorlds.CampaignSystem.ViewModelCollection")]
[assembly: IgnoresAccessChecksTo("TaleWorlds.Core")]
[assembly: IgnoresAccessChecksTo("TaleWorlds.Core.ViewModelCollection")]
[assembly: IgnoresAccessChecksTo("TaleWorlds.Diamond.AccessProvider.Epic")]
[assembly: IgnoresAccessChecksTo("TaleWorlds.Diamond.AccessProvider.Steam")]
[assembly: IgnoresAccessChecksTo("TaleWorlds.Diamond.AccessProvider.Test")]
[assembly: IgnoresAccessChecksTo("TaleWorlds.Diamond")]
[assembly: IgnoresAccessChecksTo("TaleWorlds.DotNet.AutoGenerated")]
[assembly: IgnoresAccessChecksTo("TaleWorlds.DotNet")]
[assembly: IgnoresAccessChecksTo("TaleWorlds.Engine.AutoGenerated")]
[assembly: IgnoresAccessChecksTo("TaleWorlds.Engine")]
[assembly: IgnoresAccessChecksTo("TaleWorlds.Engine.GauntletUI")]
[assembly: IgnoresAccessChecksTo("TaleWorlds.GauntletUI.Data")]
[assembly: IgnoresAccessChecksTo("TaleWorlds.GauntletUI")]
[assembly: IgnoresAccessChecksTo("TaleWorlds.GauntletUI.ExtraWidgets")]
[assembly: IgnoresAccessChecksTo("TaleWorlds.GauntletUI.PrefabSystem")]
[assembly: IgnoresAccessChecksTo("TaleWorlds.GauntletUI.TooltipExtensions")]
[assembly: IgnoresAccessChecksTo("TaleWorlds.InputSystem")]
[assembly: IgnoresAccessChecksTo("TaleWorlds.Library")]
[assembly: IgnoresAccessChecksTo("TaleWorlds.Localization")]
[assembly: IgnoresAccessChecksTo("TaleWorlds.MountAndBlade.AutoGenerated")]
[assembly: IgnoresAccessChecksTo("TaleWorlds.MountAndBlade.Diamond")]
[assembly: IgnoresAccessChecksTo("TaleWorlds.MountAndBlade")]
[assembly: IgnoresAccessChecksTo("TaleWorlds.MountAndBlade.GauntletUI.Widgets")]
[assembly: IgnoresAccessChecksTo("TaleWorlds.MountAndBlade.Helpers")]
[assembly: IgnoresAccessChecksTo("TaleWorlds.MountAndBlade.ViewModelCollection")]
[assembly: IgnoresAccessChecksTo("TaleWorlds.NavigationSystem")]
[assembly: IgnoresAccessChecksTo("TaleWorlds.Network")]
[assembly: IgnoresAccessChecksTo("TaleWorlds.ObjectSystem")]
[assembly: IgnoresAccessChecksTo("TaleWorlds.PlatformService")]
[assembly: IgnoresAccessChecksTo("TaleWorlds.PlatformService.Epic")]
[assembly: IgnoresAccessChecksTo("TaleWorlds.PlatformService.Steam")]
[assembly: IgnoresAccessChecksTo("TaleWorlds.PlayerServices")]
[assembly: IgnoresAccessChecksTo("TaleWorlds.PSAI")]
[assembly: IgnoresAccessChecksTo("TaleWorlds.SaveSystem")]
[assembly: IgnoresAccessChecksTo("TaleWorlds.Starter.DotNetCore")]
[assembly: IgnoresAccessChecksTo("TaleWorlds.Starter.Library")]
[assembly: IgnoresAccessChecksTo("TaleWorlds.TwoDimension")]
[assembly: IgnoresAccessChecksTo("TaleWorlds.TwoDimension.Standalone")]

namespace System.Runtime.CompilerServices {

  [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = true)]
  internal class IgnoresAccessChecksToAttribute : Attribute {

    internal static readonly ConstructorInfo ConstructorInfo = typeof(IgnoresAccessChecksToAttribute)
      .GetConstructor(Public | NonPublic | Instance, null, new[] {typeof(string)}, null);

    // ReSharper disable once InconsistentNaming
    private readonly string assemblyName;

    public string AssemblyName => assemblyName;

    public IgnoresAccessChecksToAttribute(string assemblyName)
      => this.assemblyName = assemblyName;

  }

}